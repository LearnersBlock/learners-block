## Build Wi-Fi Connect UI
FROM node:14.17.0-alpine3.13 AS controller-wifi-buildstep

WORKDIR /build-context

# Install node modules with long network timeout to resolve slow disk I/O on local builds
COPY apps/wifi-connect/ui .

RUN yarn install --network-timeout 600000

# Build
RUN yarn build


## Build Python packages to avoid need for build installs in main image
FROM balenalib/%%BALENA_ARCH%%-debian-python:3.8.10-buster-build-20210506 AS python-buildstep

# Copy Python requirements file
COPY apps/backend/requirements.txt /tmp/

#Install packages into one directory
RUN pip install --user -r /tmp/requirements.txt --upgrade --no-warn-script-location


## Compile container
FROM balenalib/%%BALENA_ARCH%%-debian-python:3.8.10-buster-20210506

# Set env variables
ENV FLASK_ENV=production
ENV FLASK_APP=run
ENV PYTHONUNBUFFERED=1
ENV PATH=/root/.local/bin:$PATH

# Set working directory 
WORKDIR /app

# Install Wi-Fi connect dependencies
RUN install_packages \
  dnsmasq \
  iw \
  libglib2.0-0 \
  psmisc \
  wireless-tools

# Copy built Python packages from build container
COPY --from=python-buildstep /root/.local /root/.local

# Make required directories
RUN mkdir -p common/wifi-connect
RUN mkdir -p db

# Download Wi-Fi connect based on system architecture 
ARG VERSION="4.4.5"

RUN curl -Ls "https://github.com/balena-io/wifi-connect/releases/download/v$VERSION/wifi-connect-v$VERSION-linux-%%BALENA_ARCH%%.tar.gz" \
  | tar -xvz -C common/wifi-connect && rm -Rf common/wifi-connect/ui/*

# Add Wi-Fi connect UI
COPY --from=controller-wifi-buildstep /build-context/build common/wifi-connect/ui/

# Insert application
COPY apps/backend .

# Add in default Portainer database
COPY apps/portainer/portainer.db portainer/portainer.db

# Check for database migrations then launch controller
CMD ["bash", "start.sh"]

HEALTHCHECK --start-period=20s --timeout=30s CMD curl --silent --fail http://127.0.0.1:9090/ || exit 1
