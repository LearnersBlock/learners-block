# Build File Manager
FROM composer AS filemanager-buildstep

## Install required build dependencies
RUN apk add ncurses

## Set workdir to the build folder
WORKDIR /build-context

## Copy content to prepare
COPY frontend/apps/file-manager/ .

## Run the build process
RUN composer run build


# Build interface
FROM balenalib/amd64-alpine-node:14-build AS interface-buildstep

## Instal Quasar
RUN yarn global add @quasar/cli && export PATH="$(yarn global bin):$PATH"

# Install node_modules
COPY frontend/apps/interface/yarn.lock /build-context-node/yarn.lock
COPY frontend/apps/interface/package.json /build-context-node/package.json

RUN yarn install --cwd /build-context-node

WORKDIR /build-context

## Copy interface source code to container
COPY frontend/apps/interface/ .

# Ensure any old builds are removed before building
# node_modules is excluded by .dockerignore but a check exists here just in case
RUN mkdir -p ./dist/ && rm -r ./dist/
RUN mkdir -p ./node_modules/ && rm -r ./node_modules/

# Add in built node_modules
# Moved in rather than created in place to avoid dependence on .dockerignore
RUN mv -f /build-context-node/node_modules .

RUN yarn run lint
RUN quasar build

# Build Wi-Fi Connect
FROM balenalib/amd64-alpine-node:14-build AS controller-wifi-buildstep

# Install node_modules
COPY controller/apps/wifi-connect/ui/yarn.lock /build-context-node/yarn.lock
COPY controller/apps/wifi-connect/ui/package.json /build-context-node/package.json

## Install app dependencies
RUN yarn install --cwd /build-context-node

WORKDIR /build-context

## Copy controller source code to container
COPY controller/apps/wifi-connect/ui .

# Ensure any old builds are removed before building
# node_modules is excluded by .dockerignore but a check exists here just in case
RUN mkdir -p ./build/ && rm -r ./build/
RUN mkdir -p ./node_modules/ && rm -r ./node_modules/

# Move in built node_modules
# Moved in rather than created in place to avoid dependence on .dockerignore
RUN mv -f /build-context-node/node_modules .

# Build
RUN yarn build


FROM alpine

## Copy built content ready for adding to folders

COPY --from=filemanager-buildstep /build-context/dist /build/filemanager

COPY --from=interface-buildstep /build-context/dist/spa /build/interface

COPY --from=controller-wifi-buildstep /build-context/build /build/controller

# On start of the container, copy the content into the mounted directoies

CMD rm -rf /export/filemanager/* && \
    rm -rf /export/interface/* && \
    rm -rf /export/controller/* && \
    cp -Rf /build/* /export/ && \  
    echo "Build complete and files added to directories. Check the logs above for build errors."
